datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole  @default(USER)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  accounts    Account[]


  Company Company[]

  Reminder Reminder[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model FinancialAccount {
  id          String    @id @default(cuid())
  accountCode String
  accountName String
  type        String
  balance     Float     @default(0.0)
  exerciceId  String
  exercice    Exercice  @relation(fields: [exerciceId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) // Automatically set to current time on creation
  updatedAt DateTime  @updatedAt      // Automatically updated to current time on every update

  @@index([exerciceId])
}

model Transaction {
  id           String    @id @default(cuid())
  date         DateTime
  description  String?
  debitAmount  Float     @default(0.0)
  creditAmount Float     @default(0.0)
  exerciceId   String
  exercice     Exercice  @relation(fields: [exerciceId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) // Automatically set to current time on creation
  updatedAt DateTime  @updatedAt      // Automatically updated to current time on every update

  @@index([exerciceId])
}

model AccountPlan {
  id             String   @id @default(cuid())
  numero_compte  String   @unique
  libelle_compte String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Balance {
  id             String   @id @default(cuid())
  exerciceId     String   @unique  // One-to-one relation with Exercice
  exercice       Exercice @relation(fields: [exerciceId], references: [id], onDelete: Cascade)
  data           Json     // JSON to store the balance sheet data (can store account numbers, debits, credits, etc.)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}



model Company {
  id        String    @id @default(cuid())
  name      String
  address   String
  nif       String    // Numéro d'Identification Fiscale
  contact   String
  logo      String?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercices Exercice[] // One company can have many exercices
  documents Document[] // One company can have many documents
  createdAt DateTime  @default(now()) // Automatically set to current time on creation
  updatedAt DateTime  @updatedAt      // Automatically updated to current time on every update

  @@unique([userId, name]) // Ensure a user can't create two companies with the same name
}

model Exercice {
  id           String    @id @default(cuid())
  name         Int
  startDate    DateTime
  endDate      DateTime
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  documents    Document[] // One exercice can have many documents
  financialAccounts FinancialAccount[] // One exercise can have many accounts
  transactions Transaction[] // One exercise can have many transactions
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  Balance Balance[]

  Reminder Reminder[]
}

model Document {
  id          String   @id @default(cuid())
  fileUrl     String   // URL where the document is stored
  fileName    String   // Original file name
  type        String   // Type of document (PDF, Excel, Word, etc.)
  companyId   String?  // Optional relation with company
  company     Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  exerciceId  String?  // Optional relation with exercise
  exercice    Exercice? @relation(fields: [exerciceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
  @@index([exerciceId])
}


model Reminder {
  id          String    @id @default(cuid())
  type        String    // Type de rappel (ex. "impôts", "frais", etc.)
  exerciceId  String    // L'exercice auquel ce rappel est lié
  exercice    Exercice   @relation(fields: [exerciceId], references: [id], onDelete: Cascade)
  userId      String    // L'utilisateur qui a créé ce rappel
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  alerts      Json      // Détails des alertes (dates et montants pour chaque tranche)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([exerciceId])
  @@index([userId])
}